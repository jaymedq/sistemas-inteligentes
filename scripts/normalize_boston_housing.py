# -*- coding: utf-8 -*-
"""Normalizar_BostonHousing

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lV9u6axwccIWADCI9P_-AeyCjiKBAJwo

# 27/08/2021
# Sistemas inteligentes
# CLUSTERIZAÇÃO
# Pressupostos:
# - Cluster é uma tarefa de aprendizado d emáquina não supervisionado, 
# não conhece rótulos de classe.
# - Toda tarefa de ML é relativa a padrões e com base em modelo quantitativo. 
# Portanto, requer que os dados sejam convertidos para números.
# - Se Clusters agrupam, surge a necessidade de determinar qual é o número de
# grupos a ser obtido.
# - Nosso foco é desenvolver sistemas inteligente. Portanto, uma aplicação será
# entregue
"""

import pandas

# 1 - Preparar a base (localizada na pasta /conntent)
path = os.path.join(os.getcwd(),'database','BostonHousing.csv')
data = pandas.read_csv(path,sep=';')

# 1.1 -Separar os dados numericos dos dados categoricos
num_data = data

#converter os dados numericos e mndarray (vetor de numerosdo python)
num_data = num_data.values
print(num_data)

# 2 - Normalização
# Min-Max
num_data_normalized = (num_data - num_data.min())/(num_data.max() -num_data.min())
print(num_data_normalized)

# 3 - Padronização ( com base nmas medias e desvios padrão)
# ATENÇÃO: A padronização preserva os pesos intrínsecos dos valores dos 
# atributos, significando que há risco de viés na determinação dos pesos
# que o modelo de ML obterá
# Portanto, a padronização não é recomendada para o treinamento de ML 

std_data = (num_data - num_data.mean())/num_data.std()
print(std_data)

# 4 - Normalizar e salvar o modelo de normalização para uso posterior
# 4.1 Obter um modelo normalizador a partir dos dados de entrada.
from sklearn import preprocessing

normalizer = preprocessing.MinMaxScaler()
data_normalizer_model = normalizer.fit(std_data)

from pickle import dump
dump(data_normalizer_model, open('data_normalizer_model.pkl', 'wb'))

# 4.2 Normalizar a base de entrada com o modelo normalizador obtido
normalized_data = data_normalizer_model.fit_transform(num_data)

#Incorporar os dados normalizados em um unico objeto
#converter o ndarray em data frame
final_data = pandas.DataFrame(normalized_data, columns=['crim','zn','indus','chas','nox','rm','age','dis','rad','tax','ptratio','b','lstat','medv'])
print(f'\n----------NORMALIZED DATA--------\n{final_data}')
#Salvar o resultado em um csv para análise posterior.
final_data.to_csv('NormalizedBostonHousing.csv', sep=';', encoding='utf-8')